cos16.asm是入口处，经过命名规则发现的；
写这个代码发现了类型定义的重要性；
void debug_mem(unsigned int addr_16bit)

cos16完成2个功能，软切换和加载。

将数组gdt设置成局部变量，不行，该成全局变量。

void debug_mem(unsigned int addr_16bit)
本想将形参该成为unsigned long addr_32bit
但turbo c不支持这样的地址。

    asm mov ax,int13_es
    asm mov es,ax
    asm mov ax,int13_cx
    asm mov bx,int13_bx
    asm mov cx,int13_cx
    asm mov dx,int13_dx
    asm int 13H
寄存器使用过多，导致生成了错乱的代码。

计算过程中使用了0x10000，超过了16位，错乱。
使用移位来完成相同的功能。

pm.asm还不能选择.386宏，否则offset都成了32位偏移量了。

发现可以使用D:\TASM\BIN\B32TOOLS来查看编译错误。

死掉的地方找到了，不是在mov cr0的时候，而是之前的lidtr和lgdtr，
看来不要轻易的人为哪些指令不可能死，一定要最终确认。

lgdt指令不认识段式地址，只有线性地址，这一点很重要。

在pm.asm中，在mov cr0,eax之前jmp $并不会导致reboot，说明中断是关闭的。但不加cli，进入保护模式经常异常。
在intel手册中找到了进入保护模式前cli的原因：
8.9.1. Switching to Protected Mode
Before switching to protected mode, a minimum set of system data structures and code modules
must be loaded into memory, as described in Section 8.8., “Software Initialization for Protected-
Mode Operation”. Once these tables are created, software initialization code can switch into
protected mode.
Protected mode is entered by executing a MOV CR0 instruction that sets the PE flag in the CR0
register. (In the same instruction, the PG flag in register CR0 can be set to enable paging.)
Execution in protected mode begins with a CPL of 0.
The 32-bit IA-32 processors have slightly different requirements for switching to protected
mode. To insure upwards and downwards code compatibility with all 32-bit IA-32 processors,
it is recommended that the following steps be performed:
1. Disable interrupts. A CLI instruction disables maskable hardware interrupts. NMI
interrupts can be disabled with external circuitry. (Software must guarantee that no
exceptions or interrupts are generated during the mode switching operation.)
2. Execute the LGDT instruction to load the GDTR register with the base address of the
GDT.
3. Execute a MOV CR0 instruction that sets the PE flag (and optionally the PG flag) in
control register CR0.
4. Immediately following the MOV CR0 instruction, execute a far JMP or far CALL
instruction. (This operation is typically a far jump or call to the next instruction in the
instruction stream.)
The JMP or CALL instruction immediately after the MOV CR0 instruction changes the
flow of execution and serializes the processor.
If paging is enabled, the code for the MOV CR0 instruction and the JMP or CALL
instruction must come from a page that is identity mapped (that is, the linear address before
the jump is the same as the physical address after paging and protected mode is enabled).
The target instruction for the JMP or CALL instruction does not need to be identity
mapped.
5. If a local descriptor table is going to be used, execute the LLDT instruction to load the
segment selector for the LDT in the LDTR register.
6. Execute the LTR instruction to load the task register with a segment selector to the initial
protected-mode task or to a writable area of memory that can be used to store TSS
information on a task switch.
7. After entering protected mode, the segment registers continue to hold the contents they had
in real-address mode. The JMP or CALL instruction in step 4 resets the CS register.
Perform one of the following operations to update the contents of the remaining segment
registers.
― Reload segment registers DS, SS, ES, FS, and GS. If the ES, FS, and/or GS registers
are not going to be used, load them with a null selector.
― Perform a JMP or CALL instruction to a new task, which automatically resets the
values of the segment registers and branches to a new code segment.
8. Execute the LIDT instruction to load the IDTR register with the address and limit of the
protected-mode IDT.
9. Execute the STI instruction to enable maskable hardware interrupts and perform the
necessary hardware operation to enable NMI interrupts.
Random failures can occur if other instructions exist between steps 3 and 4 above. Failures will
be readily seen in some situations, such as when instructions that reference memory are inserted
between steps 3 and 4 while in system management mode.
8.9.2. Switching Back to Real-Address Mode
The processor switches back to real-address mode if software clears the PE bit in the CR0
register with a MOV CR0 instruction. A procedure that re-enters real-address mode should
perform the following steps:
1. Disable interrupts. A CLI instruction disables maskable hardware interrupts. NMI
interrupts can be disabled with external circuitry.
2. If paging is enabled, perform the following operations:
― Transfer program control to linear addresses that are identity mapped to physical
addresses (that is, linear addresses equal physical addresses).
― Insure that the GDT and IDT are in identity mapped pages.
― Clear the PG bit in the CR0 register.
― Move 0H into the CR3 register to flush the TLB.
3. Transfer program control to a readable segment that has a limit of 64 KBytes (FFFFH).
This operation loads the CS register with the segment limit required in real-address mode.
4. Load segment registers SS, DS, ES, FS, and GS with a selector for a descriptor containing
the following values, which are appropriate for real-address mode:
― Limit = 64 KBytes (0FFFFH)
― Byte granular (G = 0)
― Expand up (E = 0)
― Writable (W = 1)
― Present (P = 1)
― Base = any value
The segment registers must be loaded with non-null segment selectors or the segment
registers will be unusable in real-address mode. Note that if the segment registers are not reloaded, execution continues using the descriptor attributes loaded during protected
mode.
5. Execute an LIDT instruction to point to a real-address mode interrupt table that is within
the 1-MByte real-address mode address range.
6. Clear the PE flag in the CR0 register to switch to real-address mode.
7. Execute a far JMP instruction to jump to a real-address mode program. This operation
flushes the instruction queue and loads the appropriate base and access rights values in the
CS register.
8. Load the SS, DS, ES, FS, and GS registers as needed by the real-address mode code. If any
of the registers are not going to be used in real-address mode, write 0s to them.
9. Execute the STI instruction to enable maskable hardware interrupts and perform the
necessary hardware operation to enable NMI interrupts.

分析了一下函数的调用过程：
call far ptr和call near ptr都一样的，因为ret只有一个。
所以，near跳转前要将cs压栈。

#define cos32_len (512*32*4)
编译器将这个宏认成了0，无奈，改写如下：
#define cos32_len 0x10000
没有预处理功能的原因。

看turbo c的编译：
0x1c000/0x10000+0xc000
	mov	dx,1
	mov	ax,-16384
	push	dx
	push	ax

cos32_load_addr+32*512*3
	xor	dx,dx
	mov	ax,-16384
	push	dx
	push	ax
只因为没有预处理。

u盘的磁道为32，在加载asm32时，在内存中会将asm16覆盖掉，不过此时asm16已经没有存在的价值了。

Disk geometry parameters for target USB disk:
	Cylinders = 7
	MediaType = 11
	TracksPerCylinder = 255
	SectorsPerTrack = 63
	BytesPerSector = 512

增加了fat32程序，支持文件系统。
turbo c不支持//注释方式，只支持/**/注释方式。

制作u盘文件系统时，使用winimage录制了朗科u盘的镜像，烧到apacer上，windows不能识别，认为需要重新格式化。
因此，对于每个u盘都需要亲自录制镜像，然后在镜像的基础上修改。
使用usbboot可以生成32扇区为一磁道的格式，这样比较方便。
flashboot只能生成63扇区为一磁道的格式。

lib.c中包含的打印函数支持可重入。因为所有模块都要用。
fat32.c这个模块要使用，自己封装，封装后的函数可以不可重入，因为只有自己的模块使用。

修改了内存结构安排，导致堆栈段变化。
错误的把20000H的堆栈设置成了ss:2000H，sp:0000H，在段页式的内存结构中，在一个段内，会产生环回。
2000H:0000H减一，会变成2000H:ffffH，而不是1fffH:000fH或者1000H:ffffH。
如果一直在减少会逐步从2000H:ffffH变成2000H:0000H。
应该是ss:1000H，sp:0ffeH。
找到不能返回内核进程的原因了。
      sp_over:
        push     DGROUP:_temp_reg_sp
        push     DGROUP:_temp_reg_ss
        push     ax
        push     cx
        push     dx
        push     bx
        push     bp
        push     si
        push     di
        push     ds
        push     es
        ;int_stack
        mov      ss,word ptr DGROUP:_temp_reg_ss
        mov      sp,word ptr DGROUP:_temp_reg_sp
        ;scheule
        call     far ptr _time_int_func
        ;point to new pt.reg
        mov      sp,word ptr DGROUP:_sche_stack
        mov      ss,word ptr DGROUP:_sche_stack+2
        ;fresh
        pop      es
        pop      ds
        pop      di
        pop      si
        pop      bp
        pop      bx
        pop      dx
        pop      cx
        pop      ax

        pop      ss ;ss not change must.
        pop      sp ;point to stack

        ;send eoi
        mov      al,020H
        mov      dx,020H
        out      dx,al

        iret
应为修改了堆栈指针，导致堆栈段和tss段不在一个16位段中。
因此，在进行pop ss时，ss为0x1000，而继续pop sp时，仍然想从tss那段内存中更新sp，但tss的内存段为0，而此时因为ss已经变成0x1000了。
因此，pop出来的sp就是一个错误值了。
看这个注释：;ss not change must.!!!

为了支持不同的段，修改如下：
;fresh
        pop      es
        pop      ds
        pop      di
        pop      si
        pop      bp
        pop      bx
        pop      dx
        pop      cx
        pop      ax
        pop      DGROUP:_temp_reg_ss
	pop      DGROUP:_temp_reg_sp

	mov      _temp_reg,ax
	mov      ax,word ptr DGROUP:_temp_reg_ss
	mov      ss,ax
	mov      ax,word ptr DGROUP:_temp_reg_sp
        mov      sp,ax
	mov      ax,_temp_reg

使用turbo c的除法和取余操作，结果反汇编的结果如下：
;	?debug	L 140
	mov	al,byte ptr DGROUP:_disk_para_table+3
	mov	ah,0
	cwd	
	push	dx
	push	ax
	push	word ptr [bp+8]
	push	word ptr [bp+6]
	call	far ptr LUMOD@
	mov	word ptr [bp-3],ax
因此，不能直接用。

目前的每簇扇区数是8，也就是每簇是1K。

//error
{
  第一个数据簇的扇区数(lba) = 保留扇区数 + 2*sizeof(fat);
  但这个数据簇是全零保留。

  第一个有效的簇号是簇2，该簇拥来存放目录表
  目录表的扇区数(lba) = 保留扇区数 + 2*sizeof(fat) + 每簇扇区数;
}

关于磁盘镜像的大小，0x425600是数据簇1，0x426600是第二簇，也就是目录表。
数据簇是0x427600-0x428600，完美！！！

进入u盘，察看磁盘属性，发现明明只有几百兆的U盘却显示的是1.85G容量。
并且已经使用了141M。

写入了一个asm32.bin文件，发现目录表的位置在第一个数据簇中。

第一个数据簇的扇区数(lba) = 保留扇区数 + 2*sizeof(fat);
此处就是dir目录表。

手动加上这个目录表，asm32.bin。

但是因为只增加了目录表，没有修改fat表，导致显示了asm32.bin，但不能复制，也不能用新的文件粘贴覆盖。

于是手动修改目录表，将name[0]设置为0xe5，重新刷新os镜像，windows不再显示该文件了。

发现在复制新文件后，原来的删除项还保留了，目录项从第二个开始写，也许为了尽可能在意外时备份吧。

使用指针
dir = (fat32_dir_item *)(BUFFER_ADDR*0x1000);

;	?debug	L 385
	mov	word ptr [bp-4],16384
	mov	word ptr [bp-6],0
翻译是正确的，但使用的时候是错的。

        les	bx,dword ptr [bp-6]
	cmp	byte ptr es:[bx],229
es没有使用[bp-4]更新。

手动更新es寄存器。

如果一个函数的返回值是dword的，那么编译器无法通过。
因为16位模式下，使用的ax回传，ax是16位的。

始终没有找到匹配的目录项，原因定位结果是dir中存放的是ASM32.BIN，而期望匹配的是asm32.bin。
到网上查阅资料，可能的原因如下：
如果文件名符合 8.3 规则，即短文件名规则，需要使用目录项中offset为0x0c位的值域。当这个字节为 0x00 时，表示文件名全部为大写；0x08 时，表示主文件名全部为小写；0x10 表示扩展名全部为小写；0x18 表示主文件名和扩展名都为小写。

文件系统的读功能已经完成，因为内存调整，asm32已经直接从磁盘缓冲区移动到高端内存了。导致os1的代码运行异常，增加了复制到低端内存的功能后，一切正常！！！

在调试的时候，修改os1.bin文件后直接复制到u盘中，然后重启，OK。
不需要关心os1和os2的大小问题，同时也脱离了winimage工具。

太完美了！！！

10、bugfix
封装了tc中对于指针的使用。
/* 设置指针段寄存器, set pointer segment */
#define push_ps(reg_ps) \
    do { \
        WORD reg_es = (reg_ps) >> 4; \
        asm push es; \
        asm push ax; \
        asm mov ax,reg_es; \
        asm mov es,ax; \
        asm pop ax; \
    } while (0)

/* 设置指针段寄存器, recover pointer segment */
#define pop_ps() asm pop es

在push和pop之间的代码中涉及指针的部分都使用这个段，而且只能使用这个段。

VOID print_string(BYTE *str, BYTE color, WORD row, WORD col)
{
    use_ss();
    while (0 != *str) {
        print_char(*str, color, row, col++);
        str++;
    }
    pop_ss();
}
这样是错误的，因为中间不能调用函数，否则堆栈乱了。
在c语言的嵌入汇编代码块中，push和pop必须成对出现，否则很危险。
push和pop之间出现了函数调用，则会导致堆栈错位，因为push和pop影响的是sp，而函数使用的是bp。
因此，修改如下：
/* 设置指针段寄存器, set pointer segment */
#define push_ps(reg_ps) \
    do { \
        WORD reg_es = (reg_ps) >> 4; \
        asm push ax; \
        asm push es; \
        asm mov ax,reg_es; \
        asm mov es,ax; \
        asm pop ax; \
        asm pop ax; \
    } while (0)

#define use_ss() \
    do { \
        asm push ax; \
        asm push es; \
        asm mov ax,ss; \
        asm mov es,ax; \
        asm pop ax; \
        asm pop ax; \
    } while (0)

/* 设置指针段寄存器, set pointer segment */
#define push_ps(reg_ps, reg_es) \
    do { \
        WORD reg_xs = (reg_ps) >> 4; \
        asm push ax; \
        asm push es; \
        asm mov ax,reg_xs; \
        asm mov es,ax; \
        asm pop reg_es; \
        asm pop ax; \
    } while (0)

为了各个函数不相互影响，又作了如下修改：
#define use_ss(reg_es) \
    do { \
        asm push ax; \
        asm push es; \
        asm mov ax,ss; \
        asm mov es,ax; \
        asm pop reg_es; \
        asm pop ax; \
    } while (0)

#define pop_ss(reg_es) \
    do { \
        asm push reg_es; \
        asm pop es; \
    } while (0)

奇怪的指针
VOID get_file_clus(BYTE *file_name, DWORD *clus)
{
    ...

    /* 解析dir */
    fat_dir = (fat32_dir_item *)p32addr(BUFFER_ADDR);

    /* 指针使用es寄存器 */
    push_ps(0x40000, tmp_reg);

    ...

    /* ...
            mov word ptr [bp-20],es
            mov word ptr [bp-22],bx */
    dir = &fat_dir[i];

    ...

    *(WORD *)((BYTE *)clus + 2) = dir->DIR_FstClusHI;
    *(WORD *)clus = dir->DIR_FstClusLO;
发现上面两句指令，会导致es变化。
其中，dir是使用了段0x4000的，而dir是普通的ss段。
结果居然正确，我原来的理解是在push_ps()和pop_ss()之间只能使用一种段范围的指针。
查看汇编代码如下：
;	?debug	L 656
	les	bx,dword ptr [bp-26]
	mov	ax,word ptr es:[bx+20]
	les	bx,dword ptr [bp+10]
	mov	word ptr es:[bx+2],ax
;	?debug	L 657
	les	bx,dword ptr [bp-26]
	mov	ax,word ptr es:[bx+26]
	les	bx,dword ptr [bp+10]
	mov	word ptr es:[bx],ax
注意，这里用的指令时les，不是lea！！！

les(load pointer into es)
les reg，oprd
该指令把操作数oprd中所含的32地址指针的段值部分送到es，把偏移部分送到指令给出的通用寄存器reg。

les	bx,dword ptr [bp-26]
mov	ax,word ptr es:[bx+20]
[bp-26]表示堆栈变量的地址，而这个地址中是dir这个指针，因此[bp-26]中存放的是32位指针，原因是在dir = &fat_dir[i];执行时，es已经放到这个堆栈变量中。
这两个指令会将dir->DIR_FstClusHI的段和偏移取出，段和偏移对应地址的内容送入ax寄存器。此时es仍然是0x4000。
les	bx,dword ptr [bp+10]
mov	word ptr es:[bx+2],ax
这两个指令会将clus的段和偏移取出，之后es变成了ss。

因此，上面的代码中有一定巧合成分。
如果不是在fat_dir = (fat32_dir_item *)p32addr(BUFFER_ADDR);和dir = &fat_dir[i];中间有个修改es的代码，那么就是错误的。

这样写不够好，应该是在设置32位指针的时候就设置好才够稳妥。

将如下定义：
/* 32位地址 */
#define p32addr(addr) ((addr) * 0x1000)

/* 设置指针段寄存器, set pointer segment */
#define push_ps(reg_ps, reg_es) \
    do { \
        WORD reg_xs = (reg_ps) >> 4; \
        asm push ax; \
        asm push es; \
        asm mov ax,reg_xs; \
        asm mov es,ax; \
        asm pop reg_es; \
        asm pop ax; \
    } while (0)

#define use_ss(reg_es) \
    do { \
        asm push ax; \
        asm push es; \
        asm mov ax,ss; \
        asm mov es,ax; \
        asm pop reg_es; \
        asm pop ax; \
    } while (0)

#define pop_ss(reg_es) \
    do { \
        asm push reg_es; \
        asm pop es; \
    } while (0)
修改为：
#define init_32p(p, addr) \
    do { \
        *(WORD *) &(p) = (addr); /* offset */ \
        *((WORD *) &(p) + 1) = ((addr) & 0xffff0000) >> 4; /* segment */ \
    } while (0)